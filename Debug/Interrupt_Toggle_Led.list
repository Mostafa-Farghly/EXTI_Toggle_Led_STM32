
Interrupt_Toggle_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000794  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000970  08000970  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000970  08000970  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000970  08000970  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000970  08000970  00010970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000974  08000974  00010974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000020  08000998  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08000998  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e63  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000642  00000000  00000000  00021ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000218  00000000  00000000  000224f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00022708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000147b  00000000  00000000  000228b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000680  00000000  00000000  00023d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006a04  00000000  00000000  000243b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002adb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006cc  00000000  00000000  0002ae34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000940 	.word	0x08000940

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000940 	.word	0x08000940

08000204 <EXTI_interruptInit>:
 *						structure which holds the configuration options.
 *
 * Return:			void
 ***************************************************************************************/
void EXTI_interruptInit(const EXTI_lineInterruptConfig_Type *a_pinConfig)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	/* Initialize corresponding handler */
	HandlersCallBack_Arr[a_pinConfig->Line] = a_pinConfig->callBackFunc;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	4a1c      	ldr	r2, [pc, #112]	; (8000288 <EXTI_interruptInit+0x84>)
 8000218:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/* Enable Interrupt */
	EXTI->IMR |= 0x1 << a_pinConfig->Line;
 800021c:	4b1b      	ldr	r3, [pc, #108]	; (800028c <EXTI_interruptInit+0x88>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	7812      	ldrb	r2, [r2, #0]
 8000224:	4611      	mov	r1, r2
 8000226:	2201      	movs	r2, #1
 8000228:	408a      	lsls	r2, r1
 800022a:	4611      	mov	r1, r2
 800022c:	4a17      	ldr	r2, [pc, #92]	; (800028c <EXTI_interruptInit+0x88>)
 800022e:	430b      	orrs	r3, r1
 8000230:	6013      	str	r3, [r2, #0]

	/* Clear triggers */
	/*TODO*/

	/* set required trigger */
	if(a_pinConfig->Trigger == EXTI_RIS_FALL_TRIGGER || a_pinConfig->Trigger == EXTI_RISING_TRIGGER)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	785b      	ldrb	r3, [r3, #1]
 8000236:	2b02      	cmp	r3, #2
 8000238:	d003      	beq.n	8000242 <EXTI_interruptInit+0x3e>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	785b      	ldrb	r3, [r3, #1]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10a      	bne.n	8000258 <EXTI_interruptInit+0x54>
	{
		EXTI->RTSR |= 0x1 << a_pinConfig->Line;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <EXTI_interruptInit+0x88>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	4611      	mov	r1, r2
 800024c:	2201      	movs	r2, #1
 800024e:	408a      	lsls	r2, r1
 8000250:	4611      	mov	r1, r2
 8000252:	4a0e      	ldr	r2, [pc, #56]	; (800028c <EXTI_interruptInit+0x88>)
 8000254:	430b      	orrs	r3, r1
 8000256:	6093      	str	r3, [r2, #8]
	}

	if(a_pinConfig->Trigger == EXTI_RIS_FALL_TRIGGER || a_pinConfig->Trigger == EXTI_FALLING_TRIGGER)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	785b      	ldrb	r3, [r3, #1]
 800025c:	2b02      	cmp	r3, #2
 800025e:	d003      	beq.n	8000268 <EXTI_interruptInit+0x64>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	785b      	ldrb	r3, [r3, #1]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d10a      	bne.n	800027e <EXTI_interruptInit+0x7a>
	{
		EXTI->FTSR |= 0x1 << a_pinConfig->Line;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <EXTI_interruptInit+0x88>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	7812      	ldrb	r2, [r2, #0]
 8000270:	4611      	mov	r1, r2
 8000272:	2201      	movs	r2, #1
 8000274:	408a      	lsls	r2, r1
 8000276:	4611      	mov	r1, r2
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <EXTI_interruptInit+0x88>)
 800027a:	430b      	orrs	r3, r1
 800027c:	60d3      	str	r3, [r2, #12]
	}
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	2000003c 	.word	0x2000003c
 800028c:	40013c00 	.word	0x40013c00

08000290 <EXTI0_IRQHandler>:
   -- ISRs
   ---------------------------------------------------------------------------- */

/* EXTI Line0 interrupt */
void EXTI0_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 0;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <EXTI0_IRQHandler+0x1c>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <EXTI0_IRQHandler+0x1c>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[0]();
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <EXTI0_IRQHandler+0x20>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4798      	blx	r3
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40013c00 	.word	0x40013c00
 80002b0:	2000003c 	.word	0x2000003c

080002b4 <EXTI1_IRQHandler>:


/* EXTI Line1 interrupt */
void EXTI1_IRQHandler(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 1;
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <EXTI1_IRQHandler+0x1c>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <EXTI1_IRQHandler+0x1c>)
 80002be:	f043 0302 	orr.w	r3, r3, #2
 80002c2:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[1]();
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <EXTI1_IRQHandler+0x20>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4798      	blx	r3
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40013c00 	.word	0x40013c00
 80002d4:	2000003c 	.word	0x2000003c

080002d8 <EXTI2_IRQHandler>:


/* EXTI Line2 interrupt */
void EXTI2_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 2;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <EXTI2_IRQHandler+0x1c>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <EXTI2_IRQHandler+0x1c>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[2]();
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <EXTI2_IRQHandler+0x20>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4798      	blx	r3
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40013c00 	.word	0x40013c00
 80002f8:	2000003c 	.word	0x2000003c

080002fc <EXTI3_IRQHandler>:


/* EXTI Line3 interrupt */
void EXTI3_IRQHandler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 3;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <EXTI3_IRQHandler+0x1c>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <EXTI3_IRQHandler+0x1c>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[3]();
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <EXTI3_IRQHandler+0x20>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4798      	blx	r3
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40013c00 	.word	0x40013c00
 800031c:	2000003c 	.word	0x2000003c

08000320 <EXTI4_IRQHandler>:


/* EXTI Line4 interrupt */
void EXTI4_IRQHandler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 4;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <EXTI4_IRQHandler+0x1c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <EXTI4_IRQHandler+0x1c>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[4]();
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <EXTI4_IRQHandler+0x20>)
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	4798      	blx	r3
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40013c00 	.word	0x40013c00
 8000340:	2000003c 	.word	0x2000003c

08000344 <EXTI9_5_IRQHandler>:


/* EXTI Line[9:5] interrupts */
void EXTI9_5_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	/* Check which line generated the interrupt request */
	int i;
	for(i = 5; i <= 9; i++)
 800034a:	2305      	movs	r3, #5
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e01f      	b.n	8000390 <EXTI9_5_IRQHandler+0x4c>
	{
		if((EXTI->PR >> i) & (EXTI->IMR >> i) & 0x01)
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <EXTI9_5_IRQHandler+0x5c>)
 8000352:	695a      	ldr	r2, [r3, #20]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	40da      	lsrs	r2, r3
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <EXTI9_5_IRQHandler+0x5c>)
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	fa21 f303 	lsr.w	r3, r1, r3
 8000362:	4013      	ands	r3, r2
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	2b00      	cmp	r3, #0
 800036a:	d00e      	beq.n	800038a <EXTI9_5_IRQHandler+0x46>
		{
			/* Clear pending flag */
			EXTI->PR |= 0x1 << i;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <EXTI9_5_IRQHandler+0x5c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	2101      	movs	r1, #1
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	4611      	mov	r1, r2
 800037a:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <EXTI9_5_IRQHandler+0x5c>)
 800037c:	430b      	orrs	r3, r1
 800037e:	6153      	str	r3, [r2, #20]

			/* Call handler call back function */
			HandlersCallBack_Arr[i]();
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <EXTI9_5_IRQHandler+0x60>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	4798      	blx	r3
	for(i = 5; i <= 9; i++)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3301      	adds	r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b09      	cmp	r3, #9
 8000394:	dddc      	ble.n	8000350 <EXTI9_5_IRQHandler+0xc>
		}
	}
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40013c00 	.word	0x40013c00
 80003a4:	2000003c 	.word	0x2000003c

080003a8 <EXTI15_10_IRQHandler>:


/* EXTI Line[15:10] ISR */
void EXTI15_10_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	/* Check which line generated the interrupt request */
	int i;
	for(i = 10; i <= 15; i++)
 80003ae:	230a      	movs	r3, #10
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	e01f      	b.n	80003f4 <EXTI15_10_IRQHandler+0x4c>
	{
		if((EXTI->PR >> i) & (EXTI->IMR >> i) & 0x01)
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <EXTI15_10_IRQHandler+0x5c>)
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	40da      	lsrs	r2, r3
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <EXTI15_10_IRQHandler+0x5c>)
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	fa21 f303 	lsr.w	r3, r1, r3
 80003c6:	4013      	ands	r3, r2
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00e      	beq.n	80003ee <EXTI15_10_IRQHandler+0x46>
		{
			/* Clear pending flag */
			EXTI->PR |= 0x1 << i;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <EXTI15_10_IRQHandler+0x5c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	2101      	movs	r1, #1
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a09      	ldr	r2, [pc, #36]	; (8000404 <EXTI15_10_IRQHandler+0x5c>)
 80003e0:	430b      	orrs	r3, r1
 80003e2:	6153      	str	r3, [r2, #20]

			/* Call handler call back function */
			HandlersCallBack_Arr[i]();
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <EXTI15_10_IRQHandler+0x60>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	4798      	blx	r3
	for(i = 10; i <= 15; i++)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b0f      	cmp	r3, #15
 80003f8:	dddc      	ble.n	80003b4 <EXTI15_10_IRQHandler+0xc>
		}
	}
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40013c00 	.word	0x40013c00
 8000408:	2000003c 	.word	0x2000003c

0800040c <PVD_IRQHandler>:


/* PVD through EXTI16 line detection interrupt */
void PVD_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 16;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <PVD_IRQHandler+0x1c>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <PVD_IRQHandler+0x1c>)
 8000416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800041a:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[16]();
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <PVD_IRQHandler+0x20>)
 800041e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000420:	4798      	blx	r3
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40013c00 	.word	0x40013c00
 800042c:	2000003c 	.word	0x2000003c

08000430 <RTC_Alarm_IRQHandler>:


/* RTC Alarms (A and B) through EXTI17 line interrupt */
void RTC_Alarm_IRQHandler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 17;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <RTC_Alarm_IRQHandler+0x1c>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <RTC_Alarm_IRQHandler+0x1c>)
 800043a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043e:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[17]();
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <RTC_Alarm_IRQHandler+0x20>)
 8000442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000444:	4798      	blx	r3
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40013c00 	.word	0x40013c00
 8000450:	2000003c 	.word	0x2000003c

08000454 <OTG_FS_WKUP_IRQHandler>:


/* USB On-The-Go FS Wakeup through EXTI18 line interrupt */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 18;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <OTG_FS_WKUP_IRQHandler+0x1c>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <OTG_FS_WKUP_IRQHandler+0x1c>)
 800045e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000462:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[18]();
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <OTG_FS_WKUP_IRQHandler+0x20>)
 8000466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000468:	4798      	blx	r3
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40013c00 	.word	0x40013c00
 8000474:	2000003c 	.word	0x2000003c

08000478 <TAMP_STAMP_IRQHandler>:


/* Tamper and TimeStamp interrupts through the EXTI21 line */
void TAMP_STAMP_IRQHandler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 21;
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <TAMP_STAMP_IRQHandler+0x1c>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <TAMP_STAMP_IRQHandler+0x1c>)
 8000482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000486:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[21]();
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <TAMP_STAMP_IRQHandler+0x20>)
 800048a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800048c:	4798      	blx	r3
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40013c00 	.word	0x40013c00
 8000498:	2000003c 	.word	0x2000003c

0800049c <RTC_WKUP_IRQHandler>:


/* RTC Wakeup interrupt through the EXTI22 line */
void RTC_WKUP_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	/* Clear pending flag */
	EXTI->PR |= 0x1 << 22;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <RTC_WKUP_IRQHandler+0x1c>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <RTC_WKUP_IRQHandler+0x1c>)
 80004a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004aa:	6153      	str	r3, [r2, #20]

	/* Call handler call back function */
	HandlersCallBack_Arr[22]();
 80004ac:	4b03      	ldr	r3, [pc, #12]	; (80004bc <RTC_WKUP_IRQHandler+0x20>)
 80004ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b0:	4798      	blx	r3
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40013c00 	.word	0x40013c00
 80004bc:	2000003c 	.word	0x2000003c

080004c0 <GPIO_pinInit>:
 *						structure which holds the configurations
 *
 * Return:			void
 ***************************************************************************************/
void GPIO_pinInit(const GPIO_PinConfig_Type *a_pinConfig_Ptr)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	 * (shift value of MODER bits = 2 * pin number)
	 *
	 * 1. Clear the two bits of MODER which corresponds to the bit number.
	 * 2. Put the desired value into the targeted MODER bits.
	 */
	GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->MODER &= ~(0x03UL << (2 * a_pinConfig_Ptr->PinNum));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b80      	ldr	r3, [pc, #512]	; (80006d0 <GPIO_pinInit+0x210>)
 80004d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	785b      	ldrb	r3, [r3, #1]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	2203      	movs	r2, #3
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	43da      	mvns	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	4b79      	ldr	r3, [pc, #484]	; (80006d0 <GPIO_pinInit+0x210>)
 80004ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80004f0:	400a      	ands	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
	GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->MODER |= (a_pinConfig_Ptr->PinMode << (2 * a_pinConfig_Ptr->PinNum));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b75      	ldr	r3, [pc, #468]	; (80006d0 <GPIO_pinInit+0x210>)
 80004fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	4619      	mov	r1, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	fa01 f303 	lsl.w	r3, r1, r3
 8000512:	4619      	mov	r1, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	4b6d      	ldr	r3, [pc, #436]	; (80006d0 <GPIO_pinInit+0x210>)
 800051c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000520:	430a      	orrs	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
	 * The same approach of the MODER is used here.
	 *
	 * 1. Clear the two bits of PUPDR which corresponds to the bit number.
	 * 2. Put the desired value into the targeted PUPDR bits.
	 */
	GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->PUPDR &= ~(0x03UL << (2 * a_pinConfig_Ptr->PinNum));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	4b69      	ldr	r3, [pc, #420]	; (80006d0 <GPIO_pinInit+0x210>)
 800052c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000530:	68d9      	ldr	r1, [r3, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	785b      	ldrb	r3, [r3, #1]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	2203      	movs	r2, #3
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	43da      	mvns	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	4b62      	ldr	r3, [pc, #392]	; (80006d0 <GPIO_pinInit+0x210>)
 8000548:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800054c:	400a      	ands	r2, r1
 800054e:	60da      	str	r2, [r3, #12]
	GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->PUPDR |= (a_pinConfig_Ptr->PullStatus << (2 * a_pinConfig_Ptr->PinNum));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <GPIO_pinInit+0x210>)
 8000558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055c:	68da      	ldr	r2, [r3, #12]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	785b      	ldrb	r3, [r3, #1]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	4b56      	ldr	r3, [pc, #344]	; (80006d0 <GPIO_pinInit+0x210>)
 8000578:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800057c:	430a      	orrs	r2, r1
 800057e:	60da      	str	r2, [r3, #12]
	
	/*Set output type and output speed in case of output mode*/
	if(a_pinConfig_Ptr->PinMode == GPIO_OUTPUT)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d15a      	bne.n	800063e <GPIO_pinInit+0x17e>
	{
		/*Set output type*/
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->OTYPER &= ~(0x01UL << (a_pinConfig_Ptr->PinNum));
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b50      	ldr	r3, [pc, #320]	; (80006d0 <GPIO_pinInit+0x210>)
 8000590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	785b      	ldrb	r3, [r3, #1]
 800059a:	461a      	mov	r2, r3
 800059c:	2301      	movs	r3, #1
 800059e:	4093      	lsls	r3, r2
 80005a0:	43da      	mvns	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	4b49      	ldr	r3, [pc, #292]	; (80006d0 <GPIO_pinInit+0x210>)
 80005aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80005ae:	400a      	ands	r2, r1
 80005b0:	605a      	str	r2, [r3, #4]
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->OTYPER |= ((a_pinConfig_Ptr->OutputType) << (a_pinConfig_Ptr->PinNum));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <GPIO_pinInit+0x210>)
 80005ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	4b3e      	ldr	r3, [pc, #248]	; (80006d0 <GPIO_pinInit+0x210>)
 80005d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80005dc:	430a      	orrs	r2, r1
 80005de:	605a      	str	r2, [r3, #4]
		
		/*Set output speed*/
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->OSPEEDR &= ~(0x03UL << (2 * a_pinConfig_Ptr->PinNum));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <GPIO_pinInit+0x210>)
 80005e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ec:	6899      	ldr	r1, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	2203      	movs	r2, #3
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43da      	mvns	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <GPIO_pinInit+0x210>)
 8000604:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000608:	400a      	ands	r2, r1
 800060a:	609a      	str	r2, [r3, #8]
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->OSPEEDR |= (a_pinConfig_Ptr->OutputSpeed << (2 * a_pinConfig_Ptr->PinNum));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <GPIO_pinInit+0x210>)
 8000614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	4619      	mov	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	785b      	ldrb	r3, [r3, #1]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	4619      	mov	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <GPIO_pinInit+0x210>)
 8000634:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000638:	430a      	orrs	r2, r1
 800063a:	609a      	str	r2, [r3, #8]
		uint8 pinNumShift = (a_pinConfig_Ptr->PinNum) % 8;
		
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->AFR[registerNumber] &= ~(0x0FUL << (pinNumShift));
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->AFR[registerNumber] |= ((a_pinConfig_Ptr->AltFunc) << (pinNumShift * 4));
	}
}
 800063c:	e043      	b.n	80006c6 <GPIO_pinInit+0x206>
	else if(a_pinConfig_Ptr->PinMode == GPIO_ALT)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d13f      	bne.n	80006c6 <GPIO_pinInit+0x206>
		uint8 registerNumber = (a_pinConfig_Ptr->PinNum) / 8;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	73fb      	strb	r3, [r7, #15]
		uint8 pinNumShift = (a_pinConfig_Ptr->PinNum) % 8;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	73bb      	strb	r3, [r7, #14]
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->AFR[registerNumber] &= ~(0x0FUL << (pinNumShift));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <GPIO_pinInit+0x210>)
 8000660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000664:	7bfa      	ldrb	r2, [r7, #15]
 8000666:	3208      	adds	r2, #8
 8000668:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	220f      	movs	r2, #15
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	43d9      	mvns	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <GPIO_pinInit+0x210>)
 800067e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	4001      	ands	r1, r0
 8000686:	3208      	adds	r2, #8
 8000688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIO_PORTS_ARRAY[a_pinConfig_Ptr->Port]->AFR[registerNumber] |= ((a_pinConfig_Ptr->AltFunc) << (pinNumShift * 4));
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <GPIO_pinInit+0x210>)
 8000694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000698:	7bfa      	ldrb	r2, [r7, #15]
 800069a:	3208      	adds	r2, #8
 800069c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	799b      	ldrb	r3, [r3, #6]
 80006a4:	461a      	mov	r2, r3
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <GPIO_pinInit+0x210>)
 80006b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006bc:	7bfa      	ldrb	r2, [r7, #15]
 80006be:	4301      	orrs	r1, r0
 80006c0:	3208      	adds	r2, #8
 80006c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000000 	.word	0x20000000

080006d4 <GPIO_togglePinValue>:
 * 					2- Pin: The pin number of the required pin, refer to Pin number possible options
 *
 * Return:			void
 ***************************************************************************************/
void GPIO_togglePinValue(Port_Type a_port, PinNum_Type a_pinNum)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
	GPIO_PORTS_ARRAY[a_port]->ODR ^= 0x01 << a_pinNum;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <GPIO_togglePinValue+0x3c>)
 80006e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4905      	ldr	r1, [pc, #20]	; (8000710 <GPIO_togglePinValue+0x3c>)
 80006fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000700:	4042      	eors	r2, r0
 8000702:	615a      	str	r2, [r3, #20]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000000 	.word	0x20000000

08000714 <main>:

void Exti13(void);


int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
	/* Enable clock */
	RCC_AHB1_enableClock(RCC_AHB1_GPIOA);
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f85e 	bl	80007dc <RCC_AHB1_enableClock>
	RCC_AHB1_enableClock(RCC_AHB1_GPIOC);
 8000720:	2002      	movs	r0, #2
 8000722:	f000 f85b 	bl	80007dc <RCC_AHB1_enableClock>
	RCC_APB2_enableClock(RCC_APB2_SYSCFG);
 8000726:	200e      	movs	r0, #14
 8000728:	f000 f86e 	bl	8000808 <RCC_APB2_enableClock>

	/* Initialize GPIO pins */
	GPIO_PinConfig_Type s_pinA5Config = {.Port = GPIO_PORTA,
 800072c:	4a18      	ldr	r2, [pc, #96]	; (8000790 <main+0x7c>)
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000736:	6018      	str	r0, [r3, #0]
 8000738:	3304      	adds	r3, #4
 800073a:	8019      	strh	r1, [r3, #0]
 800073c:	3302      	adds	r3, #2
 800073e:	0c0a      	lsrs	r2, r1, #16
 8000740:	701a      	strb	r2, [r3, #0]
										 .PinMode = GPIO_OUTPUT,
										 .PullStatus = GPIO_PULLDOWN,
										 .OutputSpeed = GPIO_OUT_LOW_SPEED,
										 .OutputType = GPIO_OUT_PUSH_PULL,
										 .AltFunc = GPIO_AF_NA};
	GPIO_pinInit(&s_pinA5Config);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff feba 	bl	80004c0 <GPIO_pinInit>

	GPIO_PinConfig_Type s_pinC13Config = {.Port = GPIO_PORTC,
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <main+0x80>)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000756:	6018      	str	r0, [r3, #0]
 8000758:	3304      	adds	r3, #4
 800075a:	8019      	strh	r1, [r3, #0]
 800075c:	3302      	adds	r3, #2
 800075e:	0c0a      	lsrs	r2, r1, #16
 8000760:	701a      	strb	r2, [r3, #0]
										  .PinMode = GPIO_INPUT,
										  .PullStatus = GPIO_NOPULL,
										  .OutputSpeed = GPIO_OUT_SPEED_NA,
									  	  .OutputType = GPIO_OUT_TYPE_NA,
										  .AltFunc = GPIO_AF_NA};
	GPIO_pinInit(&s_pinC13Config);
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff feaa 	bl	80004c0 <GPIO_pinInit>

	/* Initialize external interrupt */
	SYSCFG_EXTIPort(SYSCFG_EXTI_PORTC, SYSCFG_GPIO13);
 800076c:	210d      	movs	r1, #13
 800076e:	2002      	movs	r0, #2
 8000770:	f000 f860 	bl	8000834 <SYSCFG_EXTIPort>

	EXTI_lineInterruptConfig_Type s_extIPinC13Config = {.Line = EXTI13,
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <main+0x84>)
 8000776:	463b      	mov	r3, r7
 8000778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077c:	e883 0003 	stmia.w	r3, {r0, r1}
														.Trigger = EXTI_FALLING_TRIGGER,
														.callBackFunc = Exti13};

	EXTI_interruptInit(&s_extIPinC13Config);
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fd3e 	bl	8000204 <EXTI_interruptInit>

	/* Enable interrupt in NVIC */
	NVIC_enableIRQ(EXTI15_10_IRQ);
 8000788:	2028      	movs	r0, #40	; 0x28
 800078a:	f000 f80f 	bl	80007ac <NVIC_enableIRQ>

    /* Loop forever */
	for(;;);
 800078e:	e7fe      	b.n	800078e <main+0x7a>
 8000790:	08000958 	.word	0x08000958
 8000794:	08000960 	.word	0x08000960
 8000798:	08000968 	.word	0x08000968

0800079c <Exti13>:
}


/* CallBack Handler */
void Exti13(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	GPIO_togglePinValue(GPIO_PORTA, GPIO_PIN5);
 80007a0:	2105      	movs	r1, #5
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff96 	bl	80006d4 <GPIO_togglePinValue>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <NVIC_enableIRQ>:
 *
 * Return:
 * 			void: Returns nothing
 */
void NVIC_enableIRQ(IRQn_Type a_IRQn)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[GET_IRQ_REG_NUM(a_IRQn)] = 1 << GET_IRQ_BIT_NUM(a_IRQn);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 031f 	and.w	r3, r3, #31
 80007bc:	2201      	movs	r2, #1
 80007be:	fa02 f103 	lsl.w	r1, r2, r3
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <NVIC_enableIRQ+0x2c>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	e000e100 	.word	0xe000e100

080007dc <RCC_AHB1_enableClock>:
 *
 * Return: void.
 *
 */
void RCC_AHB1_enableClock(AHB1Peripheral_Type a_peripheral)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	/* Set the bit in the AHB1ENR that corresponds to the desired peripheral */
	RCC->AHB1ENR |= (1 << a_peripheral);
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <RCC_AHB1_enableClock+0x28>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a03      	ldr	r2, [pc, #12]	; (8000804 <RCC_AHB1_enableClock+0x28>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40023800 	.word	0x40023800

08000808 <RCC_APB2_enableClock>:
 *
 * Return: void.
 *
 */
void RCC_APB2_enableClock(APB2Peripheral_Type a_peripheral)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	/* Set the bit in the APB2ENR that corresponds to the desired peripheral */
	RCC->APB2ENR |= (1 << a_peripheral);
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <RCC_APB2_enableClock+0x28>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	2101      	movs	r1, #1
 800081a:	fa01 f202 	lsl.w	r2, r1, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	; (8000830 <RCC_APB2_enableClock+0x28>)
 8000822:	430b      	orrs	r3, r1
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40023800 	.word	0x40023800

08000834 <SYSCFG_EXTIPort>:
 *						for the EXTIx external interrupt.
 *
 * Return:			void
 ***************************************************************************************/
void SYSCFG_EXTIPort(SYSCFG_Port_Type a_port, SYSCFG_PinNum_Type a_pinNum)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	4613      	mov	r3, r2
 8000842:	71bb      	strb	r3, [r7, #6]
	SYSCFG->EXTICR[a_pinNum / 4] &= ~(0xFUL << ((a_pinNum % 4) * 4));
 8000844:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <SYSCFG_EXTIPort+0x6c>)
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	b2d8      	uxtb	r0, r3
 800084c:	4603      	mov	r3, r0
 800084e:	3302      	adds	r3, #2
 8000850:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	210f      	movs	r1, #15
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	490e      	ldr	r1, [pc, #56]	; (80008a0 <SYSCFG_EXTIPort+0x6c>)
 8000866:	401a      	ands	r2, r3
 8000868:	1c83      	adds	r3, r0, #2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[a_pinNum / 4] |= (a_port << ((a_pinNum % 4) * 4));
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <SYSCFG_EXTIPort+0x6c>)
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	089b      	lsrs	r3, r3, #2
 8000874:	b2d8      	uxtb	r0, r3
 8000876:	4603      	mov	r3, r0
 8000878:	3302      	adds	r3, #2
 800087a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087e:	79f9      	ldrb	r1, [r7, #7]
 8000880:	79ba      	ldrb	r2, [r7, #6]
 8000882:	f002 0203 	and.w	r2, r2, #3
 8000886:	0092      	lsls	r2, r2, #2
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4904      	ldr	r1, [pc, #16]	; (80008a0 <SYSCFG_EXTIPort+0x6c>)
 800088e:	431a      	orrs	r2, r3
 8000890:	1c83      	adds	r3, r0, #2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40013800 	.word	0x40013800

080008a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	; (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008d2:	f000 f811 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff ff1d 	bl	8000714 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   r0, =_estack
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80008e8:	08000978 	.word	0x08000978
  ldr r2, =_sbss
 80008ec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80008f0:	20000098 	.word	0x20000098

080008f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4e0d      	ldr	r6, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1ba4      	subs	r4, r4, r6
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2500      	movs	r5, #0
 8000904:	42a5      	cmp	r5, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4e0b      	ldr	r6, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 f818 	bl	8000940 <_init>
 8000910:	1ba4      	subs	r4, r4, r6
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2500      	movs	r5, #0
 8000916:	42a5      	cmp	r5, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000920:	4798      	blx	r3
 8000922:	3501      	adds	r5, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800092a:	4798      	blx	r3
 800092c:	3501      	adds	r5, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	08000970 	.word	0x08000970
 8000934:	08000970 	.word	0x08000970
 8000938:	08000970 	.word	0x08000970
 800093c:	08000974 	.word	0x08000974

08000940 <_init>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	bf00      	nop
 8000944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000946:	bc08      	pop	{r3}
 8000948:	469e      	mov	lr, r3
 800094a:	4770      	bx	lr

0800094c <_fini>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr
